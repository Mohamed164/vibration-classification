/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 08.08.2024 15:36:53

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 2304;
#else
constexpr int kTensorArenaSize = 1280;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_RESHAPE, OP_GREATER_EQUAL, OP_SELECT, OP_LESS, OP_MUL, OP_ADD, OP_SUM, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,204 } };
const ALIGN(4) int32_t tensor_data1[1] = { 6, };
const TfArray<1, int> tensor_dimension1 = { 1, { 1 } };
const ALIGN(4) int32_t tensor_data2[1] = { 0, };
const TfArray<1, int> tensor_dimension2 = { 1, { 1 } };
const ALIGN(16) float tensor_data3[6] = { 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension3 = { 1, { 6 } };
const ALIGN(16) float tensor_data4[6] = { 1, 1, 1, 1, 1, 1, };
const TfArray<1, int> tensor_dimension4 = { 1, { 6 } };
const ALIGN(8) int32_t tensor_data5[2] = { 6, 1, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) float tensor_data6[6] = { -5.7560563087463379, 28.757612228393555, 9.3526458740234375, 8.2776117324829102, 11.023651123046875, -8.4473762512207031, };
const TfArray<1, int> tensor_dimension6 = { 1, { 6 } };
const float tensor_data7[1] = { 0 };
const int tensor_dimension7 = 0; /* empty TfLiteIntArray */
const ALIGN(16) float tensor_data8[6*4] = { 
  1, 0, 0, 0, 
  1, 0, 0, 0, 
  1, 0, 0, 0, 
  0, 1, 0, 0, 
  0, 1, 0, 0, 
  0, 0, 1, 0, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 6,4 } };
const ALIGN(16) float tensor_data9[6*4] = { 
  0, 1, 0, 0, 
  0, 0, 1, 0, 
  0, 0, 0, 1, 
  0, 0, 1, 0, 
  0, 0, 0, 1, 
  0, 0, 0, 1, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 6,4 } };
const ALIGN(16) float tensor_data10[6*204] = { 
  -0.001268044114112854, 0.012741419486701488, 0.043248999863862991, -0.019635638222098351, -0.025726782158017159, -0.051809132099151611, -0.073487140238285065, -0.087408892810344696, -0.11366406083106995, -0.10318329185247421, -0.043907295912504196, -0.054078321903944016, -0.058107640594244003, -0.041461504995822906, -0.064061373472213745, -0.057650066912174225, -0.10681520402431488, -0.044535368680953979, -0.055561456829309464, -0.09441886842250824, -0.0093042077496647835, -0.043362237513065338, -0.13569806516170502, -0.054820805788040161, -0.10108969360589981, -0.12036868929862976, -0.068353705108165741, -0.094863526523113251, -0.10521327704191208, -0.052622374147176743, -0.071619711816310883, -0.086182065308094025, 0.010087361559271812, -0.058648336678743362, -0.031768422573804855, 0.0033104626927524805, -0.012763564474880695, -0.059016738086938858, -0.025010809302330017, -0.038060642778873444, -0.031412690877914429, 0.015580242499709129, -0.044822975993156433, -0.06406133621931076, -0.043850809335708618, -0.072472192347049713, -0.10789192467927933, -0.072259560227394104, -0.041989371180534363, -0.041613936424255371, -0.051137670874595642, -0.0790223628282547, -0.032068513333797455, -0.042049922049045563, -0.049163363873958588, -0.044028814882040024, -0.065748006105422974, 0.0083889570087194443, -0.012902660295367241, -0.042627114802598953, -0.080457113683223724, -0.050308924168348312, -0.027553796768188477, -0.03418901190161705, -0.01624470017850399, 0.037530120462179184, 0.068107143044471741, 0.080413155257701874, 0.001628092722967267, -0.025417087599635124, 0.025121100246906281, -0.02622561901807785, -0.0035281451418995857, -0.014991533011198044, 0.065341226756572723, -0.013597895391285419, 0.016552723944187164, 0.033234864473342896, 0.065132007002830505, 0.084209457039833069, 0.047922324389219284, 0.046429634094238281, 0.054617449641227722, 0.048263467848300934, 0.021804368123412132, -0.0054674628190696239, 0.051134340465068817, 0.057784531265497208, 0.017508458346128464, 0.063479945063591003, 0.037135332822799683, -0.029230222105979919, 0.013415680266916752, 0.061610125005245209, 0.069195650517940521, -0.0072682625614106655, -0.023833747953176498, 0.012922158464789391, -0.017368318513035774, 0.028323400765657425, 0.027006823569536209, 0.1270868331193924, 0.044674009084701538, 0.051018305122852325, -0.026655865833163261, -0.039082039147615433, 0.023821435868740082, -0.00090955453924834728, -0.040127638727426529, -0.064275369048118591, 0.026603318750858307, 0.020845573395490646, 0.035476028919219971, 0.027106732130050659, 0.028528578579425812, 0.019342139363288879, 0.055447086691856384, 0.024147314950823784, 0.10219398140907288, 0.078446090221405029, 0.033633314073085785, -0.0018917542183771729, 0.025459382683038712, 0.011588738299906254, 0.11482715606689453, 0.080664075911045074, -0.041112389415502548, 0.054145563393831253, 0.011840183287858963, 0.045777156949043274, 0.012823506258428097, -0.027339888736605644, 0.030045714229345322, -0.010807326063513756, -0.06858479231595993, -0.086057312786579132, 0.0024640250485390425, 0.027152789756655693, 0.0030901369173079729, -0.050117447972297668, -0.01073833741247654, 0.041631653904914856, 0.054102562367916107, 0.011783556081354618, 0.045516643673181534, 0.03697509691119194, 0.086842559278011322, -0.0031805790495127439, 0.071329578757286072, 0.048902157694101334, 0.034640707075595856, 0.064252398908138275, 0.021737789735198021, 0.033114004880189896, -0.041172828525304794, 0.012301026843488216, 0.022685976698994637, 0.024649789556860924, -0.056730613112449646, -0.014590324833989143, 0.0027626729570329189, -0.021367920562624931, 0.0063386061228811741, 0.0035241222940385342, -0.015550823882222176, 0.041281223297119141, -0.015241464599967003, -0.015827449038624763, -0.033287718892097473, -0.039798475801944733, -0.078219197690486908, 0.051051400601863861, 0.0084485365077853203, -0.090518660843372345, -0.04253103956580162, 0.0065727089531719685, -0.11050917208194733, -0.039295841008424759, 0.013187599368393421, -0.064387708902359009, -0.0077557708136737347, -0.071790359914302826, -0.0030932663939893246, 0.081871971487998962, 0.029517738148570061, 0.0088996421545743942, -0.030132105574011803, 0.036992602050304413, 0.039866358041763306, -0.044141840189695358, -0.013746200129389763, 0.036508671939373016, -0.0068029393441975117, -0.0028390947263687849, 0.026229176670312881, 0.0067339367233216763, -0.061985008418560028, -0.012304184027016163, -0.047914262861013412, -0.10123298317193985, 0.0091214003041386604, -0.039512861520051956, -0.017503241077065468, 0.0034188774880021811, 
  5.7253579143434763e-05, 0.0089007792994379997, -0.092539206147193909, -0.041361965239048004, -0.039262786507606506, 0.049807462841272354, 0.045092161744832993, 0.020077569410204887, 0.040197998285293579, -0.0092972684651613235, 0.063812568783760071, 0.058841541409492493, 0.04563918337225914, 0.025507647544145584, -0.0065782475285232067, 0.063648894429206848, 0.024043789133429527, 0.01925174705684185, 0.020035240799188614, 0.050628140568733215, 0.021428033709526062, 0.06830664724111557, 0.037839621305465698, 0.026093538850545883, 0.023091079667210579, 0.034664660692214966, 0.013650426641106606, 0.042185872793197632, 0.033579394221305847, 0.049983453005552292, -0.011963957920670509, 0.020910173654556274, 0.033785045146942139, 0.028077775612473488, 0.04816572368144989, 0.077236078679561615, 0.026383345946669579, 0.07120668888092041, 0.023999987170100212, 0.01200882438570261, 0.0014424625551328063, 0.053626615554094315, 0.0024550280068069696, 0.034052666276693344, 0.050788845866918564, -0.010769550688564777, 0.054124217480421066, 0.048679966479539871, 0.10087098926305771, 0.05733412504196167, 0.052430864423513412, 0.0086843287572264671, 0.046580612659454346, 0.012898081913590431, 0.067757569253444672, 0.04769422858953476, 0.02714294008910656, 0.038569286465644836, 0.035281296819448471, 0.025958511978387833, 0.013537418097257614, -0.0114600770175457, -0.0058358972892165184, -0.012853304855525494, 0.0064464942552149296, -0.045765962451696396, -0.015399517491459846, -0.011971499770879745, 0.00040668682777322829, -0.045313894748687744, 0.023727394640445709, 0.010283590294420719, 0.026790587231516838, 0.029279379174113274, 0.0039438907988369465, 0.00306175765581429, 0.050339508801698685, 0.051859114319086075, 0.045368868857622147, 0.041163396090269089, 0.017590513452887535, 0.073094509541988373, 0.040341738611459732, -0.010257984511554241, -0.010138033889234066, 0.020970184355974197, -0.013231602497398853, -0.02693808451294899, -0.0027284545358270407, 0.037750951945781708, -0.007345960009843111, 0.032137643545866013, -0.0010351893724873662, 0.019362475723028183, 0.05181102454662323, -0.00040667701978236437, 0.043067440390586853, 0.0076514082029461861, 0.0080648614093661308, 0.025985358282923698, -0.015168053098022938, -0.0092536173760890961, 0.041628789156675339, 0.049335349351167679, 0.019035864621400833, 0.026652118191123009, 0.0099768675863742828, 0.0056909020058810711, -0.002473586006090045, 0.032842967659235001, -0.0078035593032836914, 0.005504334345459938, 0.033022787421941757, 0.013230228796601295, -0.0032576557714492083, 0.022914320230484009, 0.031361956149339676, 0.055642735213041306, 0.013542390428483486, 0.0091396244242787361, 0.012228626757860184, 0.057689860463142395, 0.014232084155082703, 0.017069939523935318, 0.049352731555700302, 0.040710631757974625, 0.010994434356689453, 0.052474029362201691, 0.030158920213580132, 0.044801786541938782, 0.017969714477658272, 0.030414789915084839, 0.037375297397375107, 0.03187965601682663, 0.031013220548629761, 0.028202919289469719, 0.00044541375245898962, -0.032953690737485886, -0.12984640896320343, 0.031263962388038635, 0.021469000726938248, 0.032732490450143814, 0.062785044312477112, 0.033874023705720901, 0.021172810345888138, 0.054348867386579514, 0.023753698915243149, 0.05771433562040329, 0.055840086191892624, -0.010522841475903988, 0.0057007456198334694, 0.049830708652734756, 0.053353447467088699, 0.064409121870994568, 0.04696221649646759, 0.043127719312906265, 0.0085113644599914551, 0.070441260933876038, 0.038860231637954712, 0.050014056265354156, 0.045197989791631699, 0.029619695618748665, 0.03644658625125885, 0.057714164257049561, 0.046290893107652664, 0.059464789927005768, 0.0079214423894882202, 0.050713274627923965, 0.094109348952770233, 0.053650416433811188, 0.075021073222160339, 0.10356872528791428, 0.056644879281520844, 0.08645804226398468, 0.071520060300827026, 0.098286688327789307, 0.038986716419458389, 0.063785895705223083, 0.022780640050768852, -0.033041782677173615, 0.016833817586302757, -0.0036337724886834621, 0.072961241006851196, 0.057518601417541504, 0.065171606838703156, 0.054144885390996933, 0.060684729367494583, 0.045313414186239243, 0.035073403269052505, 0.03072168305516243, 0.0312785804271698, 0.065164618194103241, 0.052304055541753769, 0.027154130861163139, 0.02657834067940712, 0.051225591450929642, 0.055218175053596497, 0.050915561616420746, 0.053680617362260818, 0.016700204461812973, 0.013383113779127598, 0.010511915199458599, -0.01836823858320713, -0.00095741695258766413, 
  -4.7782459660083987e-06, 0.013810261152684689, 0.047590579837560654, 0.00055101944599300623, 0.011332112364470959, -0.054664120078086853, -0.073986940085887909, -0.059341512620449066, 0.012430437840521336, -0.03757743164896965, 0.01606297492980957, 0.019010704010725021, 0.081720046699047089, -0.033138815313577652, 0.022377770394086838, 0.070805132389068604, -0.0029756196308881044, 0.04760708287358284, 0.084649123251438141, 0.094522468745708466, -0.039006207138299942, -0.0113807562738657, -0.023842204362154007, -0.0092884860932826996, 0.04709194228053093, 0.040023203939199448, 0.016025103628635406, 0.037228982895612717, -0.016070494428277016, 0.032803896814584732, -0.013312271796166897, -0.01861678808927536, 0.051750179380178452, 0.066020011901855469, 0.023501163348555565, 0.02897271141409874, -0.014773236587643623, -0.015364584513008595, -0.07844889909029007, -0.0011911855544894934, -0.040484674274921417, -0.046134937554597855, -0.028717771172523499, -0.012590891681611538, 0.038796134293079376, 0.012645932845771313, -0.012297520413994789, 0.072122558951377869, 0.045161966234445572, 0.0094888368621468544, 0.027108363807201385, 0.0078255590051412582, 0.042019043117761612, 0.025084983557462692, 0.011892383918166161, -0.036596480756998062, -0.094797782599925995, 0.01041798572987318, 0.008234919048845768, -0.00085201131878420711, 0.0033244688529521227, -0.023878581821918488, 0.0029514885973185301, -0.0068851066753268242, -0.02051672525703907, 0.033377267420291901, 0.0011139577254652977, 0.0028605677653104067, 0.00066572800278663635, -0.011021621525287628, 0.090106092393398285, -0.00086741521954536438, 0.015312544070184231, -0.021203463897109032, -0.00025997229386121035, 0.022335270419716835, 0.0077452980913221836, 0.081813663244247437, 0.015608873218297958, 0.032443128526210785, 0.033920131623744965, 0.060793381184339523, 0.032679013907909393, 0.074684232473373413, 0.085578069090843201, 0.0089840171858668327, 0.065710194408893585, 0.057599477469921112, 0.0029920320957899094, -0.023010320961475372, 0.019648825749754906, 0.049246139824390411, 0.054746951907873154, -0.024660810828208923, 0.020849820226430893, 0.0055668307468295097, -0.0009022204321809113, -0.016784528270363808, 0.0524330735206604, 0.065137483179569244, 0.061435416340827942, 0.098228365182876587, 0.060196075588464737, 0.10251238942146301, 0.0048316004686057568, 0.062891446053981781, -0.044838555157184601, -0.060431785881519318, -0.091882511973381042, 0.043019227683544159, 0.0064595611765980721, 0.015098748728632927, -0.0090085733681917191, -0.0013071238063275814, 0.023062640801072121, -0.015161281451582909, 0.01639091782271862, 0.060478739440441132, 0.041204482316970825, 0.043212022632360458, 0.025855043902993202, 0.014906886965036392, -0.02388867549598217, 0.043469272553920746, 0.021457966417074203, 0.039505809545516968, 0.043689273297786713, -0.00080912030534818769, 0.040277190506458282, 0.027020843699574471, 0.0037870095111429691, 0.035202573984861374, 0.01757911778986454, 0.042697478085756302, 0.019933240488171577, 0.01556787546724081, -0.00035045915865339339, -0.068759068846702576, 0.14490723609924316, -0.092395633459091187, -0.022835260257124901, 0.047519873827695847, -0.01645083911716938, 0.058379307389259338, 0.056249763816595078, 0.030644262209534645, 0.022955996915698051, 0.034058079123497009, 0.11020969599485397, 0.022703062742948532, 0.064751952886581421, 0.088916629552841187, 0.03720426931977272, 0.023546649143099785, 0.065442033112049103, 0.06456456333398819, -0.079992733895778656, -0.11447424441576004, -0.048114940524101257, 0.025923393666744232, 0.044729217886924744, 0.026515984907746315, 0.020536527037620544, 0.030473737046122551, -0.03227238729596138, 0.008915020152926445, 0.016853364184498787, -0.042940244078636169, 0.0098588773980736732, 0.018411571159958839, 0.0031216018833220005, 0.029297478497028351, -0.021097214892506599, 0.01783660426735878, -0.014494655653834343, -0.25696232914924622, -0.2616945207118988, 0.043258838355541229, -0.11650118976831436, -0.085197575390338898, 0.023339578881859779, -0.040664736181497574, 0.02628178708255291, 0.05514632910490036, 0.0313275046646595, 0.024319294840097427, 0.026969825848937035, -0.021766101941466331, 0.021028740331530571, 0.034118708223104477, 0.0086446646600961685, 0.027635902166366577, -0.066990569233894348, -0.07262420654296875, -0.00074108142871409655, 0.0062927985563874245, -0.01612045057117939, -0.028265995904803276, -0.028281616047024727, -0.028631916269659996, -0.072817333042621613, 0.008413056842982769, -0.018523901700973511, -0.01461308728903532, 
  0.00010434674913994968, 0.0021474426612257957, -0.048498407006263733, -0.0060464977286756039, -0.016285203397274017, 0.0040607135742902756, 0.021188100799918175, 0.018676325678825378, 0.021362248808145523, 0.017359508201479912, 0.0081056198105216026, 0.0091056320816278458, 0.014229649677872658, 0.01373908668756485, 0.013380618765950203, 0.012099104933440685, 0.01428522914648056, 0.0028368248604238033, 0.0045988033525645733, 0.0090735061094164848, 0.0041677867993712425, 0.013603084720671177, 0.0083866007626056671, 0.02112276665866375, 0.019367724657058716, 0.021864414215087891, 0.010953771881759167, 0.006992868147790432, 0.011274786666035652, 0.010611691512167454, -0.0024223262444138527, 0.0037108003161847591, -0.0028069154359400272, 0.006200169213116169, 0.012611744925379753, 0.0031443010084331036, 0.0068881395272910595, 0.024115508422255516, -0.0027760595548897982, 0.0074797780252993107, 0.0048937411047518253, 0.0060381744988262653, 0.0031764213927090168, 0.011493879370391369, 0.023656195029616356, 0.0059326114133000374, 0.013083214871585369, 0.0085288072004914284, 0.023315297439694405, -0.00043949930113740265, 0.011815314181149006, 0.0085368407890200615, 0.010382700711488724, 0.0051789390854537487, 0.015313548035919666, 0.0035947642754763365, 0.002190388273447752, 0.0047871833667159081, -0.0010389527305960655, -0.0047482671216130257, 0.0083722174167633057, 0.0001880575146060437, -0.0002607491915114224, 0.0029985492583364248, -0.0023655854165554047, -0.0085322605445981026, -0.002906721318140626, -0.0055395676754415035, 0.0001035740933730267, -0.0017174362437799573, -0.0093806367367506027, 0.00062969379359856248, -0.0051976381801068783, 0.0063715535216033459, 0.011189557611942291, 0.010860376060009003, 0.013439873233437538, 0.010632905177772045, 0.010089709423482418, 0.0079637859016656876, 0.0013129711151123047, 0.013933098874986172, 0.014156940393149853, 0.0088098840788006783, 0.0075910268351435661, 0.0096548348665237427, -0.005830076988786459, -0.0014510253677144647, 0.013121928088366985, 0.0089625967666506767, 0.0048658335581421852, 0.015341261401772499, 0.007843606173992157, -0.0024379156529903412, -0.0042356601916253567, 0.010008832439780235, 0.0071740094572305679, -0.0016634500352665782, 0.010365359485149384, 0.0063441949896514416, 0.006889822892844677, -0.011456975713372231, 0.00022708978212904185, 0.0105439443141222, 0.011155855841934681, 0.018667368218302727, 0.0020245569758117199, 0.014035132713615894, 0.016122438013553619, 0.019230486825108528, 0.0079611297696828842, 0.0066575631499290466, 0.0059720100834965706, 0.0091054234653711319, 0.0087819583714008331, 0.0079845050349831581, 0.010401022620499134, 0.0078051332384347916, 0.003399173729121685, 0.0023016000632196665, 0.0081207547336816788, 0.012231616303324699, 0.0088738454505801201, 0.0073748803697526455, 0.0099541386589407921, 0.010101125575602055, 0.010951782576739788, 0.011131023056805134, 0.0096310218796133995, 0.0094212712720036507, 0.0075886370614171028, 0.0064870156347751617, 0.0094192605465650558, 0.010642188601195812, 0.0096277603879570961, 0.0096153561025857925, 0.00025538311456330121, -0.0063830586150288582, -0.031413689255714417, 0.006968379020690918, 0.017351223155856133, 0.010101420804858208, 0.0027541110757738352, 0.0010359331499785185, 0.0098972572013735771, 0.0078670931980013847, 0.0099582849070429802, 0.0081677436828613281, 0.0084978966042399406, 0.0007528823334723711, 0.013850042596459389, 0.0048554525710642338, 0.013684702105820179, 0.014858389273285866, 0.012377792038023472, 0.012530604377388954, 0.016864730045199394, 0.019769599661231041, 0.030261669307947159, 0.018684826791286469, 0.019983643665909767, 0.021599167957901955, 0.016851197928190231, 0.014403087086975574, 0.010381709784269333, 0.0094384839758276939, 0.014668389223515987, 0.006691081915050745, 0.021332224830985069, 0.022567732259631157, 0.017237225547432899, 0.023076338693499565, 0.0050965943373739719, 0.026447037234902382, 0.019019313156604767, 0.01456149760633707, 0.030261242762207985, 0.027883682399988174, 0.01267167367041111, 0.016670441254973412, 0.014128527604043484, 0.0094606447964906693, 0.0050618704408407211, 0.013197341002523899, 0.015501871705055237, 0.0045632440596818924, 0.015670055523514748, 0.010855691507458687, 0.0044063529931008816, 0.0063183638267219067, 0.013476051390171051, 0.0050969007425010204, 0.002163793658837676, 0.0079604145139455795, 0.0013827357906848192, 0.013196169398725033, 0.023283869028091431, 0.018948342651128769, 0.011991910636425018, 0.017911404371261597, 0.0074253417551517487, -0.0038904042448848486, 0.0052971853874623775, -0.0053060841746628284, 
  0.00034810914075933397, 0.0036243849899619818, -0.036827433854341507, 0.0018348856829106808, 0.011913502588868141, 0.0012097255093976855, 0.029016833752393723, 0.038847550749778748, 0.060405828058719635, 0.048012915998697281, 0.017239132896065712, 0.015322478488087654, 0.021641643717885017, 0.018116895109415054, 0.014260534197092056, 0.008306039497256279, 0.031798023730516434, 0.011266208253800869, 0.021435916423797607, 0.027296299114823341, -0.0047744945622980595, 0.014956449158489704, 0.014664721675217152, 0.047884777188301086, 0.067294210195541382, 0.06394483894109726, 0.03507295623421669, 0.038592655211687088, 0.021199969574809074, 0.020779147744178772, 0.030513113364577293, 0.029387213289737701, 0.011058966629207134, 0.036616232246160507, 0.030188001692295074, 0.010229171253740788, 0.030952604487538338, 0.012602020055055618, -0.022263120859861374, -0.025337392464280128, -0.021239351481199265, -0.027869187295436859, -0.013529463671147823, 0.017590329051017761, 0.022593563422560692, 0.047558743506669998, 0.039818864315748215, 0.024675296619534492, 0.027424631640315056, 0.020384941250085831, 0.024308964610099792, 0.042401086539030075, 0.018824348226189613, 0.017483804374933243, 0.044766843318939209, 0.0054050744511187077, -0.0030295476317405701, -0.013619188219308853, -0.0098042003810405731, -0.019372373819351196, 0.019338356330990791, -0.0040402119047939777, -0.0015235240571200848, 0.0052578682079911232, -0.0082632629200816154, -0.017142171040177345, -0.0026186679024249315, -0.014757692813873291, 0.00019971914298366755, 0.0064729377627372742, 0.0085586756467819214, 0.0079471440985798836, 0.0034002368338406086, 0.008646894246339798, -0.011794957332313061, 0.019899483770132065, 0.021300733089447021, 0.0059954668395221233, 0.022598205134272575, 0.0031338331755250692, -8.1686703197192401e-05, 0.00056861178018152714, 0.027466261759400368, 0.010027888230979443, 0.031578842550516129, -0.0021902613807469606, 0.00027872557984665036, 0.010428615845739841, 0.01523682102560997, -0.0048158667050302029, 0.0033628069795668125, 0.032045222818851471, 0.042732268571853638, -0.031479779630899429, -0.011783381924033165, 0.025410840287804604, 0.030610699206590652, -0.010430718772113323, 0.0031938862521201372, -0.00052186427637934685, 0.014415007084608078, -0.028760243207216263, -0.009885682724416256, 0.027828855440020561, 0.024741364642977715, 0.010825135745108128, -0.00099573249462991953, -0.0039120642468333244, 0.0080091450363397598, 0.038424704223871231, 0.0068267518654465675, -0.0061279372312128544, 0.011035321280360222, 0.017013654112815857, 0.012398065999150276, 0.0074759460985660553, 0.0044497381895780563, 0.032119512557983398, -0.0034619346261024475, 0.0073897852562367916, 0.014469008892774582, 0.0086074862629175186, 0.02352600172162056, 0.023047799244523048, -0.0042383712716400623, 0.01059952937066555, 0.020831476897001266, 0.016303172335028648, 0.024369066581130028, 0.0093986652791500092, 0.013935734517872334, 0.0072994250804185867, 0.025354310870170593, 0.024137653410434723, 0.028102828189730644, 0.021969392895698547, 0.00023083796259015799, -0.018219102174043655, 0.013189554214477539, -0.014447292312979698, -0.023954430595040321, 0.028166040778160095, 0.021244591102004051, 0.035486236214637756, 0.030485818162560463, 0.026047056540846825, 0.023297745734453201, 0.017072716727852821, 0.0095091741532087326, 0.0046220072545111179, 0.034397080540657043, 6.5616972278803587e-05, 0.015393481589853764, 0.0052597024478018284, 0.017220597714185715, 0.0019955018069595098, -0.0089194877073168755, -0.018984047695994377, 0.021227424964308739, 0.037542335689067841, 0.042018871754407883, 0.026831161230802536, 0.019368637353181839, 0.032251529395580292, 0.024158921092748642, 0.018845012411475182, 0.042123887687921524, 0.01790497824549675, 0.052399307489395142, 0.041942790150642395, 0.018966982141137123, 0.028608344495296478, -0.0046279248781502247, 0.017760368064045906, -0.001530296984128654, -0.088178031146526337, 0.0067457319237291813, 0.025066917762160301, -0.022851450368762016, 0.023659905418753624, 0.017505785450339317, 0.01512486394494772, 0.0032775348518043756, -0.0081327361986041069, 0.0019367473432794213, 0.019860047847032547, 0.010276724584400654, -0.0024962660390883684, 0.011453134007751942, -0.0050177802331745625, -0.0047735259868204594, 0.0018034006934612989, -0.030282257124781609, 0.015754764899611473, -0.0122127840295434, 0.011816517449915409, 0.020922962576150894, 0.014688435010612011, -0.00078641134314239025, 0.015018584206700325, -0.014053746126592159, -0.0036865994334220886, 0.022741854190826416, 0.002805907279253006, 
  -1.4672007637273055e-05, 0.0025463446509093046, 0.049626722931861877, 0.010557997971773148, 0.028389908373355865, 0.0043137436732649803, -0.021234937012195587, -0.011383914388716221, -0.0059088435955345631, 0.0033262609504163265, -0.0016551528824493289, 0.0015413640066981316, 0.00034458085428923368, -0.0043299919925630093, -0.0030843694694340229, -0.0011393607128411531, -0.0063993264921009541, 0.0027507818304002285, 0.0010585837299004197, -4.5130909711588174e-05, -0.0061327670700848103, -0.020127151161432266, -0.0084047252312302589, -0.0085790660232305527, 0.0047735283151268959, 0.0058710640296339989, -0.005627484992146492, 0.0059638051316142082, -0.018385214731097221, -0.003100341884419322, 0.006615207064896822, -0.006136240903288126, -0.0042602983303368092, -0.0082709351554512978, -0.0062862844206392765, -0.012917689047753811, 0.0021473793312907219, -0.030636584386229515, -0.030086753889918327, -0.033591292798519135, -0.023682570084929466, -0.018020953983068466, -0.001866790116764605, -0.00070825457805767655, -0.020235845819115639, 0.0047609168104827404, -0.0010489328997209668, 0.0042270584963262081, -0.0069304611533880234, 0.0075567835010588169, 0.011408708058297634, 0.0019771386869251728, -0.0066196182742714882, -0.002719958545640111, -0.0071529662236571312, -0.0034466090146452188, -0.0067497454583644867, -0.018346916884183884, -0.015293809585273266, 0.00585514260455966, -0.0030969479121267796, -0.0062461351044476032, 0.00099741097074002028, -0.00061344599816948175, -0.0014317742316052318, 0.0032037652563303709, 0.0090105189010500908, 0.0049875085242092609, -8.4230050561018288e-05, -0.0002175099216401577, 0.012215271592140198, -0.00039161925087682903, 0.0043606176041066647, -0.0055201323702931404, -0.0094949696213006973, -0.0077821891754865646, 0.0076868915930390358, -0.0068037817254662514, -0.0032856578473001719, 0.0014826724072918296, 0.0011328726541250944, -0.0049033514223992825, -0.01452933344990015, -0.0051960893906652927, -0.00031445189961232245, -0.0059875096194446087, 0.0020023414399474859, 0.0046451292000710964, -0.010649229399859905, -0.017339589074254036, -0.0081701846793293953, -0.0079787559807300568, 0.0056015001609921455, 0.0016179063823074102, 0.002717775059863925, -0.012898266315460205, -0.0063032442703843117, -0.0032494622282683849, -0.011344303376972675, -0.0093202944844961166, -0.0075898226350545883, -0.0092633180320262909, -0.00016750104259699583, -0.012548573315143585, -0.011254574172198772, -0.026473576202988625, -0.0021571684628725052, -0.013141151517629623, -0.033269010484218597, -0.012204374186694622, -0.01128322072327137, -0.0068877781741321087, -0.0080541269853711128, -0.014281539246439934, 0.0057364897802472115, -0.003798576770350337, -0.0063277184963226318, -0.0080584753304719925, -0.0041965534910559654, -0.0020318194292485714, -0.0083128074184060097, -0.011933779343962669, -0.0092188669368624687, -0.008753444068133831, -0.0042691496200859547, -0.0053005069494247437, 0.0022812760435044765, -0.0045078559778630733, -0.0047618718817830086, -0.010100105777382851, -0.008182847872376442, -0.0091906283050775528, -0.0067311734892427921, -0.0090352585539221764, -0.0089599983766674995, -0.0085218781605362892, -0.00039215857395902276, 0.0012226324761286378, 0.061566133052110672, -0.01299826055765152, -0.028647135943174362, -0.0031351759098470211, -0.0075941844843327999, 0.0038778022862970829, 0.0010592620819807053, -0.0047181844711303711, -0.0067868162877857685, -0.00075337907765060663, -0.0077689611352980137, 0.0033501763828098774, -0.012020480819046497, -0.012797720730304718, -0.016999794170260429, -0.022328203544020653, -0.014864376746118069, -0.0098142260685563087, -0.028186645358800888, -0.033961404114961624, -0.031339827924966812, -0.017385002225637436, -0.00093099457444623113, -0.013617058284580708, -0.016637759283185005, -0.0090244822204113007, -0.020212052389979362, -0.019752167165279388, -0.0096524748951196671, -0.01703651063144207, -0.019063197076320648, -0.022339863702654839, -0.018399983644485474, -0.033648904412984848, -0.031102277338504791, -0.026295730844140053, -0.047080598771572113, -0.067825846374034882, -0.057058252394199371, -0.038702458143234253, -0.029367133975028992, -0.027680950239300728, -0.010765485465526581, -0.012060560286045074, -0.01646706648170948, -0.019128940999507904, -0.02508288249373436, -0.013235766440629959, -0.012117043137550354, -0.022140074521303177, -0.011259313672780991, -0.012129738926887512, -0.034136749804019928, -0.0043951999396085739, -0.019988588988780975, -0.021242132410407066, -0.013642719946801662, -0.0076026474125683308, -0.026414576917886734, -0.022426368668675423, -0.014918613247573376, -0.018119344487786293, -0.0088376114144921303, -0.0039725466631352901, -0.0014319164911285043, 0.0043439879082143307, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 6,204 } };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,6 } };
const TfArray<1, int> tensor_dimension12 = { 1, { 6 } };
const TfArray<1, int> tensor_dimension13 = { 1, { 6 } };
const TfArray<1, int> tensor_dimension14 = { 1, { 6 } };
const TfArray<1, int> tensor_dimension15 = { 1, { 6 } };
const TfArray<1, int> tensor_dimension16 = { 1, { 6 } };
const TfArray<2, int> tensor_dimension17 = { 2, { 6,1 } };
const TfArray<2, int> tensor_dimension18 = { 2, { 6,4 } };
const TfArray<2, int> tensor_dimension19 = { 2, { 6,1 } };
const TfArray<2, int> tensor_dimension20 = { 2, { 6,4 } };
const TfArray<2, int> tensor_dimension21 = { 2, { 6,4 } };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,4 } };
const TfArray<2, int> tensor_dimension23 = { 2, { 1,4 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,10,6 } };
const TfArray<1, int> outputs0 = { 1, { 11 } };
const TfLiteReshapeParams opdata1 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs1 = { 2, { 11,1 } };
const TfArray<1, int> outputs1 = { 1, { 12 } };
const TfArray<2, int> inputs2 = { 2, { 12,7 } };
const TfArray<1, int> outputs2 = { 1, { 13 } };
const TfArray<3, int> inputs3 = { 3, { 13,3,4 } };
const TfArray<1, int> outputs3 = { 1, { 14 } };
const TfArray<2, int> inputs4 = { 2, { 12,7 } };
const TfArray<1, int> outputs4 = { 1, { 15 } };
const TfArray<3, int> inputs5 = { 3, { 15,3,4 } };
const TfArray<1, int> outputs5 = { 1, { 16 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 16,5 } };
const TfArray<1, int> outputs6 = { 1, { 17 } };
const TfLiteMulParams opdata7 = { kTfLiteActNone };
const TfArray<2, int> inputs7 = { 2, { 17,8 } };
const TfArray<1, int> outputs7 = { 1, { 18 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 14,5 } };
const TfArray<1, int> outputs8 = { 1, { 19 } };
const TfLiteMulParams opdata9 = { kTfLiteActNone };
const TfArray<2, int> inputs9 = { 2, { 19,9 } };
const TfArray<1, int> outputs9 = { 1, { 20 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 18,20 } };
const TfArray<1, int> outputs10 = { 1, { 21 } };
const ALIGN(1) uint8_t opdata11[1] = { 1,  }; /* op type 74=SUM */
const TfArray<2, int> inputs11 = { 2, { 21,2 } };
const TfArray<1, int> outputs11 = { 1, { 22 } };
const TfLiteSoftmaxParams opdata12 = { 1 };
const TfArray<1, int> inputs12 = { 1, { 22 } };
const TfArray<1, int> outputs12 = { 1, { 23 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 816, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 4, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 4, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 24, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 24, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 8, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 24, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 4, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 96, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 96, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 4896, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 816), (TfLiteIntArray*)&g0::tensor_dimension11, 24, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 24, },
{ kTfLiteArenaRw, kTfLiteBool, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension13, 6, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 64), (TfLiteIntArray*)&g0::tensor_dimension14, 24, },
{ kTfLiteArenaRw, kTfLiteBool, (int32_t*)(tensor_arena + 96), (TfLiteIntArray*)&g0::tensor_dimension15, 6, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension16, 24, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension17, 24, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 192), (TfLiteIntArray*)&g0::tensor_dimension18, 96, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension19, 24, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 96), (TfLiteIntArray*)&g0::tensor_dimension20, 96, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension21, 96, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 96), (TfLiteIntArray*)&g0::tensor_dimension22, 16, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension23, 16, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[13] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[13] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_RESHAPE, OP_GREATER_EQUAL, OP_SELECT, OP_LESS, OP_SELECT, OP_RESHAPE, OP_MUL, OP_RESHAPE, OP_MUL, OP_ADD, OP_SUM, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 24, };
const size_t tflNodes_subgraph_index[] = {0, 13, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  23, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_14_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 24;
  for (size_t i = 0; i < 24; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_GREATER_EQUAL] = Register_GREATER_EQUAL();
  registrations[OP_SELECT] = Register_SELECT();
  registrations[OP_LESS] = Register_LESS();
  registrations[OP_MUL] = Register_MUL();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SUM] = Register_SUM();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_14_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_14_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_14_invoke() {
  for (size_t i = 0; i < 13; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_14_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
