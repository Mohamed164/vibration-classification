/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 06.08.2024 14:13:37

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1584;
#else
constexpr int kTensorArenaSize = 560;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,39 } };
const ALIGN(16) float tensor_data1[10] = { 0.22978666424751282, -0.092987149953842163, 0.14484262466430664, 0.012837177142500877, -0.13697393238544464, -0.01374759990721941, -0.047905240207910538, -0.12948590517044067, -0.022559279575943947, 0.10222576558589935, };
const TfArray<1, int> tensor_dimension1 = { 1, { 10 } };
const ALIGN(16) float tensor_data2[20] = { 0.29216015338897705, -0.080606155097484589, 0.024884188547730446, 0.17610640823841095, 0.18178084492683411, -0.11920004338026047, -0.0084914388135075569, -0.040909051895141602, 0.047987900674343109, -0.0015674819005653262, -0.044830992817878723, 0.1356649249792099, 0.016230573877692223, 0.25455218553543091, 0.19243380427360535, -0.14397767186164856, -0.039632067084312439, -0.075048826634883881, -0.14502255618572235, 0.17078685760498047, };
const TfArray<1, int> tensor_dimension2 = { 1, { 20 } };
const ALIGN(16) float tensor_data3[4] = { -0.015117510221898556, 0.22971941530704498, -0.17656366527080536, -0.028749158605933189, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) float tensor_data4[20*39] = { 
  0.4271647036075592, -0.18944884836673737, -0.069163478910923004, 0.47053024172782898, 0.047391068190336227, 0.088986605405807495, 0.077012285590171814, -0.14990827441215515, 0.2439892590045929, -0.18348191678524017, -0.015172447077929974, 0.14556385576725006, -0.30763426423072815, 0.12399357557296753, -0.097225219011306763, 0.36182743310928345, 0.30130824446678162, 0.16393813490867615, -0.34957599639892578, -0.31878191232681274, 0.097472481429576874, -0.17191383242607117, 0.13640567660331726, -0.092734247446060181, -0.39782175421714783, 0.058923915028572083, 0.23626619577407837, -0.0058096358552575111, -0.42676776647567749, -0.020905230194330215, 0.12185259908437729, 0.083981506526470184, 0.30797275900840759, -0.051954705268144608, 0.02866838313639164, 0.4153551459312439, -0.08656572550535202, 0.31712460517883301, 0.060605399310588837, 
  -0.36507409811019897, -0.027726838365197182, 0.23270173370838165, -0.030782448127865791, -0.045860785990953445, 0.11451788246631622, 0.16542567312717438, 0.14879108965396881, 0.17077848315238953, 0.34331321716308594, -0.14614063501358032, 0.18917955458164215, 0.097737699747085571, -0.038336761295795441, 0.196574866771698, -0.18950986862182617, 0.15306843817234039, 0.081073075532913208, 0.32049193978309631, -0.16067177057266235, -0.019643614068627357, 0.0049994499422609806, 0.27931800484657288, -0.063664250075817108, 0.16349288821220398, 0.1240418553352356, -0.14404404163360596, 0.18455231189727783, -0.10834065079689026, -0.3041689395904541, -0.046925947070121765, 0.24816012382507324, 0.19855275750160217, 0.22908598184585571, 0.12278702110052109, -0.1633322685956955, -0.27369204163551331, -0.068568035960197449, 0.047357711941003799, 
  0.096793204545974731, 0.14995092153549194, -0.23760540783405304, -0.22663657367229462, 0.12565533816814423, -0.1944536417722702, 0.1159873753786087, 0.1813751608133316, 0.24112117290496826, -0.080360867083072662, -0.29751864075660706, -0.038931194692850113, -0.32016745209693909, 0.32994121313095093, -0.16197922825813293, 0.10420259088277817, 0.097772546112537384, 0.18911932408809662, 0.11887053400278091, 0.21425707638263702, 0.36959731578826904, -0.25580921769142151, 0.19249944388866425, -0.23339308798313141, 0.012100813910365105, -0.10928943008184433, 0.31624993681907654, 0.15896777808666229, -0.13711294531822205, -0.25484511256217957, -0.22006836533546448, 0.34030038118362427, 0.18367308378219604, -0.18728998303413391, 0.010132337920367718, -0.092064909636974335, -0.2320428341627121, -0.032601039856672287, 0.15847380459308624, 
  -0.22520531713962555, 0.44689476490020752, -0.17350439727306366, 0.29446446895599365, -0.091057375073432922, 0.093753889203071594, -0.17078450322151184, 0.17085710167884827, -0.050860084593296051, -0.41591525077819824, 0.14241547882556915, 0.05957365408539772, 0.0053014843724668026, 0.49227148294448853, 0.063203096389770508, -0.10625743865966797, -0.11864630877971649, -0.1900922954082489, 0.10426835715770721, 0.12369458377361298, -0.2877843976020813, -0.019889406859874725, -0.36604806780815125, -0.23153725266456604, 0.014891217462718487, 0.024268381297588348, -0.099802710115909576, 0.11614175140857697, 0.26648294925689697, 0.35578247904777527, -0.15272942185401917, 0.27625873684883118, 0.21088443696498871, -0.13122636079788208, 0.087684504687786102, -0.047827314585447311, 0.32396253943443298, -0.37085375189781189, 0.0012274279724806547, 
  0.61916488409042358, 0.16687272489070892, 0.0988120436668396, -0.017773324623703957, -0.26445820927619934, -0.12505558133125305, 0.34524300694465637, 0.06690659373998642, -0.12728257477283478, 0.2371828705072403, -0.022219350561499596, 0.060533817857503891, -0.16301606595516205, 0.10110916197299957, -0.32903927564620972, 0.26522022485733032, 0.29687991738319397, 0.18534600734710693, -0.086118109524250031, -0.16762110590934753, -0.096922419965267181, 0.17901656031608582, -0.19186714291572571, -0.11007997393608093, -0.17714060842990875, -0.04823274165391922, 0.49763956665992737, -0.15618425607681274, -0.16695176064968109, -0.097075887024402618, 0.14444749057292938, -0.11840586364269257, 0.24779729545116425, -0.1459236741065979, -0.13268019258975983, -0.16286176443099976, -0.039544720202684402, -0.29871010780334473, 0.091891452670097351, 
  -0.2441774308681488, 0.11055753380060196, 0.057891786098480225, -0.070930294692516327, -0.00084408372640609741, -0.27428218722343445, -0.011265047825872898, 0.2906048595905304, -0.22489900887012482, -0.0080315060913562775, -0.33169165253639221, -0.15009960532188416, -0.30402693152427673, -0.070108450949192047, 0.14500823616981506, 0.15911568701267242, -0.44877210259437561, -0.009450702928006649, -0.19836902618408203, -0.0725846067070961, -0.3054271936416626, -0.38665735721588135, -0.11746670305728912, -0.20580759644508362, 0.18267326056957245, -0.13096147775650024, -0.10085590928792953, -0.17663656175136566, 0.0099692158401012421, 0.20878380537033081, 0.014144694432616234, -0.20467868447303772, 0.055326879024505615, -0.38150396943092346, -0.17689138650894165, -0.52247613668441772, 0.057292234152555466, -0.30812498927116394, 0.0053019267506897449, 
  0.34088137745857239, -0.059290442615747452, 0.0037847454659640789, -0.15055574476718903, -0.16852159798145294, -0.22184301912784576, -0.025423359125852585, 0.30242735147476196, -0.078212223947048187, 0.064408108592033386, 0.02810683473944664, 0.01156302448362112, 0.041299778968095779, 0.17127154767513275, 0.12119691073894501, 0.0054763695225119591, -0.12056900560855865, -0.13808779418468475, 0.30881431698799133, 0.25491520762443542, -0.13025400042533875, 0.081567063927650452, -0.11567510664463043, 0.21913182735443115, -0.087678983807563782, 0.0064978036098182201, 0.36054894328117371, -0.47543713450431824, 0.35748404264450073, 0.057894811034202576, 0.18512700498104095, -0.31406289339065552, -0.0051273731514811516, -0.059318520128726959, -0.26850157976150513, 0.19203481078147888, -0.28966474533081055, 0.10540865361690521, -0.25884798169136047, 
  0.19152171909809113, -0.2833978533744812, 0.082277089357376099, 0.22634536027908325, 0.23036719858646393, 0.12195678800344467, 0.11308411508798599, 0.1343802809715271, -0.058759406208992004, 0.30516484379768372, -0.031440295279026031, 0.33626970648765564, -0.070541545748710632, 0.079556047916412354, -0.17480878531932831, -0.32917267084121704, -0.14585979282855988, -0.15462096035480499, -0.17308227717876434, 0.33138981461524963, 0.29772421717643738, -0.16217328608036041, -0.12812609970569611, 0.030157079920172691, -0.038780983537435532, 0.33792343735694885, -0.12960529327392578, 0.094971828162670135, -0.26899075508117676, -0.086063601076602936, 0.034240540117025375, 0.32475000619888306, 0.085322491824626923, -0.30216297507286072, -0.11084843426942825, -0.26474738121032715, -0.023744922131299973, 0.12252839654684067, 0.25404080748558044, 
  0.25480702519416809, 0.31465929746627808, 0.19824610650539398, -0.0034088471438735723, -0.36002925038337708, 0.26356783509254456, 0.031619902700185776, -0.078186318278312683, -0.01217165868729353, -0.021722862496972084, 0.030160903930664062, 0.21246792376041412, 0.21212320029735565, -0.11258423328399658, 0.072402514517307281, -0.12694485485553741, 0.1329910010099411, -0.20817151665687561, 0.22441422939300537, -0.032301690429449081, 0.23218807578086853, 0.18237438797950745, 0.22362886369228363, 0.046658378094434738, 0.085732355713844299, 0.17060339450836182, 0.24681074917316437, -0.16500142216682434, 0.25374957919120789, -0.21623863279819489, 0.21626457571983337, -0.43240034580230713, -0.17645293474197388, -0.095969036221504211, -0.26142749190330505, 0.018372321501374245, -0.28056591749191284, 0.16289286315441132, -0.20125779509544373, 
  -0.5730101466178894, 0.0057657980360090733, -0.29178819060325623, 0.0053385100327432156, -0.055043954402208328, -0.05385352298617363, -0.51060104370117188, -0.27091315388679504, -0.30956366658210754, -0.48339632153511047, -0.46359384059906006, -0.35570034384727478, -0.4891858696937561, -0.14038039743900299, -0.052678190171718597, 0.17051117122173309, -0.016746331006288528, 0.19161443412303925, 0.16980138421058655, -0.22370614111423492, -0.13004063069820404, 0.19578827917575836, 0.070161797106266022, 0.22526907920837402, 0.24855189025402069, 0.13455788791179657, -0.069216713309288025, 0.42001774907112122, -0.15493810176849365, 0.20829211175441742, -0.011358040384948254, -0.24718494713306427, -0.27699601650238037, -0.16246390342712402, 0.30797761678695679, 0.11580423265695572, 0.096167579293251038, 0.20988212525844574, -0.11467602103948593, 
  0.10446732491254807, -0.025094775483012199, 0.10278263688087463, -0.28564941883087158, -0.0850110724568367, -0.29771187901496887, 0.050336405634880066, -0.12298676371574402, -0.055379230529069901, 0.004883655346930027, -0.36529731750488281, 0.047664906829595566, -0.0044988575391471386, -0.32305800914764404, 0.17438997328281403, -0.20252038538455963, 0.03455033153295517, 0.043847750872373581, 0.083527825772762299, 0.09029272198677063, -0.27139431238174438, 0.20721027255058289, -0.21301664412021637, 0.24259307980537415, 0.29014769196510315, -0.045409757643938065, -0.22493307292461395, 0.24051976203918457, 0.15469640493392944, 0.20847554504871368, -0.23226532340049744, -0.37674698233604431, -0.20694375038146973, -0.13423231244087219, 0.41354706883430481, 0.31332588195800781, -0.18716441094875336, -0.2807338535785675, -0.30414703488349915, 
  -0.0016485110390931368, 0.14017386734485626, 0.31178075075149536, 0.043306350708007812, -0.2287416011095047, -0.47554925084114075, 0.11476562172174454, -0.36014744639396667, 0.06741546094417572, -0.19272014498710632, 0.14436545968055725, 0.11198579519987106, 0.034217644482851028, 0.46225041151046753, -0.14024324715137482, 0.18495944142341614, 0.04028710350394249, 0.046106170862913132, 0.30568477511405945, 0.01358434185385704, -0.08771543949842453, -0.078725457191467285, 0.28497636318206787, -0.020500270649790764, 0.083999305963516235, 0.14171592891216278, 0.35394570231437683, 0.3394826352596283, 0.4045664370059967, 0.23801220953464508, -0.01873508095741272, 0.030635874718427658, 0.11537171900272369, -0.08384259045124054, 0.2131769061088562, 0.019832713529467583, -0.13040538132190704, 0.18775215744972229, 0.18889541923999786, 
  -0.16730162501335144, -0.13296625018119812, 0.067432880401611328, -0.057523395866155624, 0.2586444616317749, -0.20839588344097137, -0.19172884523868561, -0.30082473158836365, -0.39099621772766113, 0.090182647109031677, -0.082865074276924133, -0.39476621150970459, 0.033677075058221817, 0.30971959233283997, -0.23099468648433685, 0.2431347519159317, 0.085908927023410797, -0.029918372631072998, 0.36544772982597351, -0.05365356057882309, 0.19714365899562836, 0.13178341090679169, -0.24602450430393219, 0.21686495840549469, 0.12716656923294067, -0.090806402266025543, -0.046116448938846588, -0.45777374505996704, 0.44835600256919861, -0.098959647119045258, -0.14373870193958282, 0.18245621025562286, -0.41790133714675903, 0.21465927362442017, -0.082448422908782959, -0.022478993982076645, 0.24228230118751526, -0.29570156335830688, -0.32790732383728027, 
  0.48633089661598206, -0.20014023780822754, -0.22312624752521515, 0.15060092508792877, 0.15073692798614502, 0.31888887286186218, -0.19488449394702911, 0.37703552842140198, 0.057283405214548111, 0.15021274983882904, 0.11822781711816788, 0.15871727466583252, 0.30475813150405884, 0.41889500617980957, -0.12590056657791138, -0.091129302978515625, -0.082251407206058502, 0.012969411909580231, -0.39500579237937927, -0.23022036254405975, -0.36854881048202515, -0.32853829860687256, -0.12109463661909103, -0.21518881618976593, -0.21266758441925049, -0.40568184852600098, 0.17265285551548004, 0.27003854513168335, -0.26443740725517273, 0.2307649552822113, -0.0062064365483820438, -0.252809077501297, -0.092028908431529999, -0.12808066606521606, 0.21124556660652161, 0.29705652594566345, 0.25869041681289673, 0.063833147287368774, 0.33787468075752258, 
  0.60989397764205933, -0.071171924471855164, -0.30729749798774719, 0.21498239040374756, 0.015818249434232712, -0.22135990858078003, -0.18048129975795746, 0.090628832578659058, 0.11758843064308167, 0.10189022123813629, 0.30298283696174622, -0.34960091114044189, -0.29549911618232727, 0.64539229869842529, -0.39910888671875, -0.14713269472122192, -0.10780353099107742, 0.080016724765300751, 0.17050230503082275, -0.30017295479774475, 0.21060758829116821, 0.23646381497383118, -0.25252699851989746, 0.16041663289070129, -0.39527758955955505, -0.26906189322471619, 0.21513572335243225, -0.28841814398765564, 0.083830490708351135, 0.097152523696422577, 0.37494787573814392, -0.061095289885997772, -0.11352347582578659, 0.27804473042488098, -0.002023451030254364, -0.1454956978559494, -0.15435142815113068, 0.13059450685977936, 0.3166297972202301, 
  -0.31279772520065308, 0.34427663683891296, -0.097860060632228851, -0.3192543089389801, -0.041428543627262115, 0.13724531233310699, -0.072497040033340454, 0.042507171630859375, -0.0646018385887146, -0.0098256012424826622, -0.065624020993709564, -0.0002992095542140305, -0.21192893385887146, -0.21019096672534943, 0.093753866851329803, 0.20601142942905426, -0.12628747522830963, 0.064214855432510376, 0.13466925919055939, 0.14600156247615814, -0.2777571976184845, 0.14798800647258759, -0.35481974482536316, 0.12758785486221313, 0.017622334882616997, -0.018810652196407318, -0.54143399000167847, -0.50447827577590942, 0.21184508502483368, -0.34236890077590942, 0.16536512970924377, -0.17620231211185455, -0.37962242960929871, -0.069519676268100739, -0.42534777522087097, -0.2903742790222168, -0.17882373929023743, -0.48230436444282532, -0.077614419162273407, 
  0.16197317838668823, -0.41954728960990906, -0.0035687924828380346, -0.034956067800521851, 0.29205900430679321, -0.049229595810174942, -0.065119735896587372, -0.19460374116897583, 0.18696773052215576, -0.25293636322021484, -0.27809283137321472, -0.0726633220911026, 0.079350918531417847, 0.13379499316215515, -0.2017551064491272, 0.13318783044815063, -0.22779645025730133, -0.1016407310962677, 0.12358740717172623, -0.070398852229118347, -0.22920243442058563, -0.11502167582511902, 0.20013517141342163, -0.083513982594013214, 0.21871969103813171, -0.032240152359008789, 0.057891380041837692, 0.36080530285835266, -0.067166633903980255, 0.18458504974842072, 0.10214950889348984, -0.057065926492214203, 0.28746157884597778, -0.17899309098720551, -0.025504389777779579, -0.14040462672710419, 0.038345728069543839, -0.28684461116790771, -0.1704113632440567, 
  -0.13884341716766357, 0.1144978329539299, 0.27609562873840332, 0.15340080857276917, 0.19888108968734741, -0.079169273376464844, -0.12016230076551437, 0.24944865703582764, 0.080464258790016174, -0.069120928645133972, -0.094909496605396271, 0.33796846866607666, -0.076604939997196198, 0.17160727083683014, -0.24859373271465302, -0.12073619663715363, -0.27245426177978516, 0.12730680406093597, 0.36422696709632874, -0.10265569388866425, 0.2442430704832077, -0.06961321085691452, -0.15226598083972931, 0.38537022471427917, -0.091740608215332031, -0.17301598191261292, -0.22608092427253723, 0.20472890138626099, -0.059423696249723434, -0.25167965888977051, -0.063496798276901245, -0.17881262302398682, 0.071702294051647186, 0.10255021601915359, -0.035268079489469528, 0.25298291444778442, 0.28609493374824524, -0.13277110457420349, 0.22143940627574921, 
  -0.52369940280914307, -0.2247902899980545, 0.077414616942405701, -0.43994554877281189, 0.13776586949825287, -0.10515542328357697, -0.289427250623703, -0.16060689091682434, -0.031488493084907532, -0.16868187487125397, -0.36529839038848877, -0.10118695348501205, -0.29036715626716614, -0.50585377216339111, -0.082140102982521057, -0.14420059323310852, -0.088504210114479065, -0.17301668226718903, -0.20430338382720947, 0.13608847558498383, -0.16592395305633545, 0.29744380712509155, -0.10848214477300644, 0.25029295682907104, -0.10631301254034042, -0.26445060968399048, -0.22982531785964966, 0.22214609384536743, -0.39842128753662109, -0.34052002429962158, 0.1617683470249176, -0.28829622268676758, -0.19546093046665192, -0.38469555974006653, 0.32716849446296692, 0.23364311456680298, -0.0063404678367078304, -0.21551826596260071, -0.29332870244979858, 
  0.19172258675098419, 0.39638885855674744, -0.10002429038286209, -0.099209979176521301, -0.24705676734447479, -0.16529549658298492, 0.07919812947511673, -0.06512739509344101, 0.21729861199855804, 0.22467523813247681, -0.24052804708480835, 0.27161481976509094, 0.20659390091896057, 0.19842724502086639, 0.1508268415927887, 0.008105897344648838, 0.11769400537014008, -0.30296072363853455, -0.26294687390327454, -0.0075555760413408279, -0.23752054572105408, -0.37804919481277466, 0.13553047180175781, -0.35949841141700745, -0.13299690186977386, -0.11713115125894547, 0.0034356678370386362, -0.093759067356586456, -0.11843705922365189, 0.37879565358161926, -0.32035022974014282, 0.055375643074512482, 0.31819668412208557, -0.13363036513328552, 0.14074262976646423, 0.22390830516815186, -0.209490567445755, 0.11307700723409653, 0.049521204084157944, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,39 } };
const ALIGN(16) float tensor_data5[10*20] = { 
  0.47908282279968262, -0.28115618228912354, -0.055361494421958923, 0.32112604379653931, 0.52316021919250488, 0.0610659159719944, 0.33421206474304199, -0.36469674110412598, 0.017732614651322365, -0.084760375320911407, 0.050336539745330811, 0.15297502279281616, 0.22118149697780609, 0.71760076284408569, 0.37630236148834229, -0.46727988123893738, -0.027732707560062408, -0.068282142281532288, -0.28329288959503174, 0.43241170048713684, 
  -0.37626150250434875, -0.42847588658332825, 0.23178175091743469, 0.33177170157432556, 0.13150104880332947, 0.021162636578083038, 0.0060659111477434635, -0.45148706436157227, -0.38019642233848572, 0.15635107457637787, -0.2687191367149353, -0.24316830933094025, 0.5177651047706604, -0.055436916649341583, 0.3795166015625, 0.65704387426376343, -0.029386397451162338, 0.12376783043146133, -0.073031790554523468, -0.30723667144775391, 
  0.0087843658402562141, -0.22653181850910187, 0.24697363376617432, 0.51369786262512207, -0.11485949158668518, -0.15160050988197327, -0.19720113277435303, -0.018106000497937202, -0.11291876435279846, 0.24049884080886841, 0.22207444906234741, 0.30611765384674072, 0.035248599946498871, -0.49416425824165344, 0.14138254523277283, -0.35767471790313721, 0.38812267780303955, -0.26653009653091431, -0.15444277226924896, -0.32575112581253052, 
  0.25948390364646912, 0.09677162766456604, 0.32359236478805542, -0.099767565727233887, -0.27504682540893555, 0.28999745845794678, -0.3750171959400177, -0.22477146983146667, -0.078552387654781342, 0.51238048076629639, 0.39836212992668152, 0.23312732577323914, -0.45886099338531494, -0.27879175543785095, -0.037450402975082397, -0.40923085808753967, -0.051663320511579514, -0.18794022500514984, 0.52978724241256714, 0.45702046155929565, 
  -0.22504530847072601, 0.23629358410835266, -0.51586109399795532, -0.35052371025085449, -0.30209594964981079, 0.38338297605514526, -0.071118883788585663, 0.068655133247375488, -0.36269658803939819, 0.44407197833061218, 0.39713335037231445, 0.20106281340122223, 0.073370635509490967, 0.047812458127737045, 0.046945460140705109, -0.092507779598236084, -0.067840874195098877, 0.3669528067111969, 0.39929720759391785, -0.004255256149917841, 
  -0.33754852414131165, 0.25640806555747986, -0.28486537933349609, 0.17907370626926422, -0.11920646578073502, -0.46319666504859924, -0.036208506673574448, 0.29472959041595459, -0.44564217329025269, -0.19453464448451996, 0.28867140412330627, 0.22473251819610596, -0.20640286803245544, 0.23433747887611389, -0.10022629797458649, -0.31990987062454224, -0.15818403661251068, 0.23181326687335968, -0.2505316436290741, 0.001644123112782836, 
  0.38158226013183594, 0.13460886478424072, -0.38080200552940369, -0.36396732926368713, 0.31498616933822632, 0.3044852614402771, 0.15077102184295654, -0.1066780686378479, -0.13460633158683777, -0.026664335280656815, 0.37807279825210571, 0.10007643699645996, -0.26169085502624512, -0.18095909059047699, 0.016989888623356819, -0.051515962928533554, 0.28296622633934021, -0.10559283941984177, -0.027134401723742485, -0.2170688807964325, 
  -0.24618770182132721, 0.30735847353935242, 0.039480682462453842, 0.14500080049037933, -0.088990069925785065, 0.3633025586605072, 0.49514171481132507, -0.4029085636138916, 0.39978876709938049, -0.26673969626426697, -0.18884219229221344, 0.37084320187568665, 0.36969593167304993, -0.27804073691368103, -0.43092131614685059, 0.41822603344917297, 0.33304992318153381, -0.015288989059627056, 0.0091089820489287376, 0.059987287968397141, 
  0.12416348606348038, 0.21537488698959351, 0.25094404816627502, 0.32214480638504028, 0.25905758142471313, 0.22252218425273895, -0.34668859839439392, -0.14565195143222809, -0.09512774646282196, 0.1309484988451004, 0.19899681210517883, 0.12163642048835754, 0.15760692954063416, -0.41441869735717773, 0.12196417152881622, 0.56103771924972534, -0.23753157258033752, 0.29948824644088745, -0.1467144638299942, -0.30769553780555725, 
  0.21900483965873718, -0.24856804311275482, 0.068812325596809387, 0.23515772819519043, 0.35178318619728088, 0.40389704704284668, -0.058198809623718262, 0.072886355221271515, 0.33544921875, -0.49436020851135254, -0.37977111339569092, 0.25855010747909546, -0.26756229996681213, -0.11495345830917358, 0.26021850109100342, 0.022088225930929184, -0.13743294775485992, 0.3725179135799408, -0.099450327455997467, 0.40291309356689453, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const ALIGN(16) float tensor_data6[4*10] = { 
  0.26289129257202148, 0.49763563275337219, 1.052750825881958, -0.20688393712043762, 0.061779748648405075, -0.51883244514465332, -0.74146932363510132, -0.11763733625411987, 0.63915848731994629, 0.31339740753173828, 
  0.69053786993026733, -0.30635929107666016, -0.64564627408981323, -0.74338126182556152, -0.68138819932937622, -0.48059695959091187, 0.13812254369258881, 0.12425635010004044, -0.17985087633132935, 0.377789705991745, 
  -0.8470270037651062, 0.69748276472091675, -0.77799218893051147, -0.70435309410095215, 0.39612531661987305, -0.53038609027862549, 0.60743498802185059, 0.45612466335296631, 0.39161637425422668, -0.5896870493888855, 
  0.027688071131706238, -0.62003976106643677, -0.52096420526504517, 0.46353676915168762, 0.32583314180374146, -0.34189766645431519, 0.52779781818389893, -0.32380285859107971, -0.74101585149765015, -0.80807429552078247, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 4,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,4 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,1 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 156, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 40, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 80, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 3120, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 800, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 160, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 160), (TfLiteIntArray*)&g0::tensor_dimension7, 80, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 40, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 48), (TfLiteIntArray*)&g0::tensor_dimension9, 16, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 16, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = kTfLiteFloat32;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = kTfLiteFloat32;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_14_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_14_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_14_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_14_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_14_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
